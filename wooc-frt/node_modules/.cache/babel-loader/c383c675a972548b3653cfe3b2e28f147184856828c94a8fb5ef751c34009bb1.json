{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'QuestionsList',\n  data() {\n    return {\n      questions: [],\n      isViewMode: false\n    };\n  },\n  created() {\n    this.fetchQuestions();\n  },\n  methods: {\n    fetchQuestions() {\n      axios.get('http://localhost:8080/api/v1/questions').then(response => {\n        this.questions = response.data;\n      }).catch(error => {\n        console.error('Failed when loading question list:', error);\n      });\n    },\n    deleteQuestion(id) {\n      axios.delete(`http://localhost:8080/api/v1/questions/${id}`).then(() => {\n        this.fetchQuestions();\n      }).catch(error => {\n        console.error('Failed when deleting this question:', error);\n      });\n    },\n    toggleViewMode(isView) {\n      this.isViewMode = isView;\n    }\n  },\n  computed: {\n    correctAnswerText() {\n      return function (question) {\n        switch (question.correctAnswer) {\n          case 1:\n            return question.optionA;\n          case 2:\n            return question.optionB;\n          case 3:\n            return question.optionC;\n          case 4:\n            return question.optionD;\n          default:\n            return '';\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","questions","isViewMode","created","fetchQuestions","methods","get","then","response","catch","error","console","deleteQuestion","id","delete","toggleViewMode","isView","computed","correctAnswerText","question","correctAnswer","optionA","optionB","optionC","optionD"],"sources":["src/components/QuestionsList.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"header\">\n      <div class=\"header-container\">\n         \n        <div class=\"menu\">\n          <ul>\n            <li><a>Wooclap</a></li>\n          </ul>\n               \n            </div>\n            <div class=\"list\">\n              <ul>\n                    <li>Question List</li>\n                </ul>\n            </div>\n            <div class=\"login\">\n                <a>Create account</a>\n                <a>Log in</a>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"page-content\">\n      <div class=\"side-nav\">\n        <ul>\n          <li :class=\"{ active: isViewMode }\"><a @click=\"toggleViewMode(true)\">View</a></li>\n          <li :class=\"{ active: !isViewMode }\"><a @click=\"toggleViewMode(false)\">Edit</a></li>\n        </ul>\n      </div>\n\n    <div class=\"container\">\n      <ul class=\"list-group\">\n        <li v-for=\"question in questions\" :key=\"question.id\" class=\"list-group-item\">\n          <div>\n            <h5>{{ question.title }}</h5>\n            <ol>\n              <li>{{ question.optionA }}</li>\n              <li>{{ question.optionB }}</li>\n              <li>{{ question.optionC }}</li>\n              <li>{{ question.optionD }}</li>\n            </ol>\n            <div v-if=\"!isViewMode\">\n              Correct Answer: {{ correctAnswerText(question) }}\n            </div>\n          </div>\n          <div class=\"edit\" v-if=\"!isViewMode\">\n            <router-link :to=\"'/question/edit/' + question.id\" class=\"btn btn-primary btn-sm\">Edit</router-link>\n            <button @click=\"deleteQuestion(question.id)\" class=\"btn btn-danger btn-sm\">Delete</button>\n          </div>\n        </li>\n      </ul>\n      <div class=\"newquestion\" v-if=\"!isViewMode\">\n        <router-link to=\"/question/add\" class=\"btn btn-add\">New Question</router-link>\n      </div>\n    </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'QuestionsList',\n  data() {\n    return {\n      questions: [],\n      isViewMode: false, \n    };\n  },\n  created() {\n    this.fetchQuestions();\n  },\n  methods: {\n    fetchQuestions() {\n      axios.get('http://localhost:8080/api/v1/questions')\n        .then(response => {\n          this.questions = response.data;\n        })\n        .catch(error => {\n          console.error('Failed when loading question list:', error);\n        });\n    },\n    deleteQuestion(id) {\n      axios.delete(`http://localhost:8080/api/v1/questions/${id}`)\n        .then(() => {\n          this.fetchQuestions(); \n        })\n        .catch(error => {\n          console.error('Failed when deleting this question:', error);\n        });\n    },\n    toggleViewMode(isView) {\n      this.isViewMode = isView;\n    }\n  },\n  computed: {\n    correctAnswerText() {\n      return function(question) {\n        switch(question.correctAnswer) {\n          case 1: return question.optionA;\n          case 2: return question.optionB;\n          case 3: return question.optionC;\n          case 4: return question.optionD;\n          default: return '';\n        }\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"AA8DA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IACAD,eAAA;MACAN,KAAA,CAAAQ,GAAA,2CACAC,IAAA,CAAAC,QAAA;QACA,KAAAP,SAAA,GAAAO,QAAA,CAAAR,IAAA;MACA,GACAS,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,uCAAAA,KAAA;MACA;IACA;IACAE,eAAAC,EAAA;MACAf,KAAA,CAAAgB,MAAA,2CAAAD,EAAA,IACAN,IAAA;QACA,KAAAH,cAAA;MACA,GACAK,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,wCAAAA,KAAA;MACA;IACA;IACAK,eAAAC,MAAA;MACA,KAAAd,UAAA,GAAAc,MAAA;IACA;EACA;EACAC,QAAA;IACAC,kBAAA;MACA,iBAAAC,QAAA;QACA,QAAAA,QAAA,CAAAC,aAAA;UACA;YAAA,OAAAD,QAAA,CAAAE,OAAA;UACA;YAAA,OAAAF,QAAA,CAAAG,OAAA;UACA;YAAA,OAAAH,QAAA,CAAAI,OAAA;UACA;YAAA,OAAAJ,QAAA,CAAAK,OAAA;UACA;YAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}